window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "qrotor", "modulename": "qrotor", "kind": "module", "doc": "<h1 id=\"qrotor-v300\">QRotor v3.0.0</h1>\n\n<p>Welcome to QRotor, a Python library to solve the energies of a methyl rotor.  </p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Check the latest documentation <a href=\"https://pablogila.github.io/QRotor/\">online</a>.\nAn offline version of the documentation is also available at <code>/docs/qrotor.html</code>.  </p>\n\n<p>The documentation can be compiled automatically using <a href=\"https://pdoc.dev/\">pdoc</a>, by running:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">source</span><span class=\"w\"> </span>pdoc.sh\n</code></pre>\n</div>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>QRotor requires the Maat package, and has the same dependencies. You can get Maat <a href=\"https://github.com/pablogila/Maat/\">here</a>.  </p>\n\n<p>To install QRotor, clone the repository from <a href=\"https://github.com/pablogila/QRotor/\">GitHub</a> or download it as a ZIP and run:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>As always, it is strongly recommended to install this package inside a Python virtual environment.  </p>\n\n<h2 id=\"license\">License</h2>\n\n<blockquote>\n  <p>TL;DR: Do what you want with this, as long as you share the source code of your modifications, also under GNU AGPLv3.  </p>\n</blockquote>\n\n<p>Copyright (C) 2024  Pablo Gila-Herranz</p>\n\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the attached GNU Affero General Public License for more details.</p>\n"}, {"fullname": "qrotor.classes", "modulename": "qrotor.classes", "kind": "module", "doc": "<h2 id=\"description\">Description</h2>\n\n<p>This module contains the common objects used in the QRotor package.</p>\n\n<p>Short general description of the class methods used:</p>\n\n<ul>\n<li><code>get_*</code> returns a value from another value, e.g. get_B(atom_type) returns the rotational inertia.</li>\n<li><code>set_*</code> sets a value, e.g. set_grid() sets the grid from the gridsize.</li>\n<li><code>to_*</code> converts to whatever.</li>\n<li><code>from_*</code> converts from whatever.</li>\n</ul>\n\n<h2 id=\"index\">Index</h2>\n\n<ul>\n<li><code>System</code>. Contains all the data for a single calculation.</li>\n<li><code>Analysis</code>. Contains different parameters to analyze the data.</li>\n<li><code>Experiment</code>. Contains a list of <code>System</code> objects, an <code>Analysis</code> object, and some plotting options as a <a href=\"https://pablogila.github.io/Maat/maat/classes.html#Plotting\">Maat plotting object</a>.</li>\n</ul>\n"}, {"fullname": "qrotor.classes.System", "modulename": "qrotor.classes", "qualname": "System", "kind": "class", "doc": "<p>Object containing all the data for a single calculation, with both inputs and outputs.</p>\n"}, {"fullname": "qrotor.classes.System.__init__", "modulename": "qrotor.classes", "qualname": "System.__init__", "kind": "function", "doc": "<p>Input parameters can be set at initialization, or modified later.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">E_levels</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">atom_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">correct_potential_offset</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_eigenvectors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">gridsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">potential_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">potential_constants</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qrotor.classes.System.comment", "modulename": "qrotor.classes", "qualname": "System.comment", "kind": "variable", "doc": "<p>Custom comment for the dataset.</p>\n", "annotation": ": str"}, {"fullname": "qrotor.classes.System.E_levels", "modulename": "qrotor.classes", "qualname": "System.E_levels", "kind": "variable", "doc": "<p>Number of energy levels to be studied.</p>\n", "annotation": ": int"}, {"fullname": "qrotor.classes.System.units", "modulename": "qrotor.classes", "qualname": "System.units", "kind": "variable", "doc": "<p>List containing the units in use, e.g. ['meV'].</p>\n"}, {"fullname": "qrotor.classes.System.atom_type", "modulename": "qrotor.classes", "qualname": "System.atom_type", "kind": "variable", "doc": "<p>Generally <code>'H'</code> or <code>'D'</code>.</p>\n", "annotation": ": str"}, {"fullname": "qrotor.classes.System.correct_potential_offset", "modulename": "qrotor.classes", "qualname": "System.correct_potential_offset", "kind": "variable", "doc": "<p>Correct the potential offset as <code>V - min(V)</code> or not.</p>\n", "annotation": ": bool"}, {"fullname": "qrotor.classes.System.save_eigenvectors", "modulename": "qrotor.classes", "qualname": "System.save_eigenvectors", "kind": "variable", "doc": "<p>Save or not the eigenvectors. Final file size will be bigger.</p>\n", "annotation": ": bool"}, {"fullname": "qrotor.classes.System.gridsize", "modulename": "qrotor.classes", "qualname": "System.gridsize", "kind": "variable", "doc": "<p>Number of points in the grid.</p>\n", "annotation": ": int"}, {"fullname": "qrotor.classes.System.grid", "modulename": "qrotor.classes", "qualname": "System.grid", "kind": "variable", "doc": "<p>The grid with the points to be used in the calculation. Can be set automatically over $2 \\Pi$ with <code>System.set_grid()</code>.</p>\n"}, {"fullname": "qrotor.classes.System.B", "modulename": "qrotor.classes", "qualname": "System.B", "kind": "variable", "doc": "<p>Rotational inertia, as in $B=\\frac{\\hbar^2}{2I}.</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.potential_name", "modulename": "qrotor.classes", "qualname": "System.potential_name", "kind": "variable", "doc": "<p>String with the name of the desired potential: <code>'zero'</code>, <code>'titov2023'</code>, <code>'test'</code>...\nIf empty or unrecognised, the custom potential values inside <code>potential_values</code> will be used.</p>\n", "annotation": ": str"}, {"fullname": "qrotor.classes.System.potential_constants", "modulename": "qrotor.classes", "qualname": "System.potential_constants", "kind": "variable", "doc": "<p>List of constants to be used in the calculation of the potential energy, in the <code>qrotor.potentials</code> module.</p>\n", "annotation": ": list"}, {"fullname": "qrotor.classes.System.potential_values", "modulename": "qrotor.classes", "qualname": "System.potential_values", "kind": "variable", "doc": "<p>Numpy array with the potential values for each point in the grid.\nCan be calculated with a function available in the <code>qrotor.potentials</code> module,\nor loaded externally with the <code>qrotor.file.load_potential()</code> function.</p>\n"}, {"fullname": "qrotor.classes.System.potential_offset", "modulename": "qrotor.classes", "qualname": "System.potential_offset", "kind": "variable", "doc": "<p><code>min(V)</code> before offset correction when <code>correct_potential_offset=True</code></p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.potential_min", "modulename": "qrotor.classes", "qualname": "System.potential_min", "kind": "variable", "doc": "<p><code>min(V)</code></p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.potential_max", "modulename": "qrotor.classes", "qualname": "System.potential_max", "kind": "variable", "doc": "<p><code>max(V)</code></p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.potential_max_B", "modulename": "qrotor.classes", "qualname": "System.potential_max_B", "kind": "variable", "doc": "<p>Reduced <code>potential_max</code>, in units of B.</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.eigenvalues", "modulename": "qrotor.classes", "qualname": "System.eigenvalues", "kind": "variable", "doc": "<p>Calculated eigenvalues of the system.</p>\n"}, {"fullname": "qrotor.classes.System.eigenvalues_B", "modulename": "qrotor.classes", "qualname": "System.eigenvalues_B", "kind": "variable", "doc": "<p>Reduced <code>eigenvalues</code>, in units of B.</p>\n"}, {"fullname": "qrotor.classes.System.eigenvectors", "modulename": "qrotor.classes", "qualname": "System.eigenvectors", "kind": "variable", "doc": "<p>Eigenvectors, if <code>save_eigenvectors</code> is True. Beware of the file size.</p>\n"}, {"fullname": "qrotor.classes.System.energy_barrier", "modulename": "qrotor.classes", "qualname": "System.energy_barrier", "kind": "variable", "doc": "<p><code>max(V) - min(eigenvalues)</code></p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.first_transition", "modulename": "qrotor.classes", "qualname": "System.first_transition", "kind": "variable", "doc": "<p>eigenvalues[1] - eigenvalues[0]</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.runtime", "modulename": "qrotor.classes", "qualname": "System.runtime", "kind": "variable", "doc": "<p>Time taken to solve the eigenvalues.</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.System.summary", "modulename": "qrotor.classes", "qualname": "System.summary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.System.set_grid", "modulename": "qrotor.classes", "qualname": "System.set_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gridsize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Analysis", "modulename": "qrotor.classes", "qualname": "Analysis", "kind": "class", "doc": "<p>Analysis object containing the different parameters to analyze the data.</p>\n"}, {"fullname": "qrotor.classes.Analysis.__init__", "modulename": "qrotor.classes", "qualname": "Analysis.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">E_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">E_diff</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">E_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">ideal_E</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qrotor.classes.Analysis.E_level", "modulename": "qrotor.classes", "qualname": "Analysis.E_level", "kind": "variable", "doc": "<p>Energy level to check in a convergence test. By default, it will be the higher calculated one.</p>\n", "annotation": ": int"}, {"fullname": "qrotor.classes.Analysis.E_diff", "modulename": "qrotor.classes", "qualname": "Analysis.E_diff", "kind": "variable", "doc": "<p>If True, in plot.convergence it will check the difference between ideal_E and the calculated one.</p>\n", "annotation": ": bool"}, {"fullname": "qrotor.classes.Analysis.E_threshold", "modulename": "qrotor.classes", "qualname": "Analysis.E_threshold", "kind": "variable", "doc": "<p>Energy Threshold for a convergence test.</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.Analysis.ideal_E", "modulename": "qrotor.classes", "qualname": "Analysis.ideal_E", "kind": "variable", "doc": "<p>Ideal energy level for a 'zero' potential, for comparison in a convergence test. Calculated automatically with Experiment.get_ideal_E()</p>\n", "annotation": ": float"}, {"fullname": "qrotor.classes.Experiment", "modulename": "qrotor.classes", "qualname": "Experiment", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "qrotor.classes.Experiment.__init__", "modulename": "qrotor.classes", "qualname": "Experiment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plotting</span><span class=\"p\">:</span> <span class=\"n\">maat</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Plotting</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">analysis</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Analysis</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "qrotor.classes.Experiment.version", "modulename": "qrotor.classes", "qualname": "Experiment.version", "kind": "variable", "doc": "<p>Version of the QRotor package used to generate the data.</p>\n"}, {"fullname": "qrotor.classes.Experiment.comment", "modulename": "qrotor.classes", "qualname": "Experiment.comment", "kind": "variable", "doc": "<p>Custom comment for the dataset.</p>\n", "annotation": ": str"}, {"fullname": "qrotor.classes.Experiment.system", "modulename": "qrotor.classes", "qualname": "Experiment.system", "kind": "variable", "doc": "<p>List containing the calculated System objects.</p>\n"}, {"fullname": "qrotor.classes.Experiment.plotting", "modulename": "qrotor.classes", "qualname": "Experiment.plotting", "kind": "variable", "doc": "<p>Maat plotting object. Check more options <a href=\"https://pablogila.github.io/Maat/maat/classes.html#Plotting\">here</a>.</p>\n"}, {"fullname": "qrotor.classes.Experiment.analysis", "modulename": "qrotor.classes", "qualname": "Experiment.analysis", "kind": "variable", "doc": "<p>Analysis object containing the different parameters to analyze the data.</p>\n"}, {"fullname": "qrotor.classes.Experiment.add", "modulename": "qrotor.classes", "qualname": "Experiment.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.discard_shit", "modulename": "qrotor.classes", "qualname": "Experiment.discard_shit", "kind": "function", "doc": "<p>Discard data that takes too much space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.get_energies", "modulename": "qrotor.classes", "qualname": "Experiment.get_energies", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.get_gridsizes", "modulename": "qrotor.classes", "qualname": "Experiment.get_gridsizes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.get_runtimes", "modulename": "qrotor.classes", "qualname": "Experiment.get_runtimes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.get_atom_types", "modulename": "qrotor.classes", "qualname": "Experiment.get_atom_types", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.sort_by_potential_values", "modulename": "qrotor.classes", "qualname": "Experiment.sort_by_potential_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.group_by_potential_values", "modulename": "qrotor.classes", "qualname": "Experiment.group_by_potential_values", "kind": "function", "doc": "<p>Returns an array of grouped Experiment objects with the same potential_values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.sort_by_gridsize", "modulename": "qrotor.classes", "qualname": "Experiment.sort_by_gridsize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.classes.Experiment.get_ideal_E", "modulename": "qrotor.classes", "qualname": "Experiment.get_ideal_E", "kind": "function", "doc": "<p>Only for 'zero' potential. Calculates the ideal energy level for a convergence test, from Experiment.Analysis.E_level</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.constants", "modulename": "qrotor.constants", "kind": "module", "doc": "<p>Common constants and default values for the QRotor package.</p>\n"}, {"fullname": "qrotor.constants.version", "modulename": "qrotor.constants", "qualname": "version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;v3.0.0&#x27;"}, {"fullname": "qrotor.constants.logname", "modulename": "qrotor.constants", "qualname": "logname", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;out&#x27;"}, {"fullname": "qrotor.constants.logfile", "modulename": "qrotor.constants", "qualname": "logfile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/pablo/D4DCDBA9DCDB8460/Users/pablo/Documents/PhD/_git/QRotor/out&#x27;"}, {"fullname": "qrotor.constants.logdirname", "modulename": "qrotor.constants", "qualname": "logdirname", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;out&#x27;"}, {"fullname": "qrotor.constants.logdir", "modulename": "qrotor.constants", "qualname": "logdir", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/pablo/D4DCDBA9DCDB8460/Users/pablo/Documents/PhD/_git/QRotor/out&#x27;"}, {"fullname": "qrotor.constants.logdirfile", "modulename": "qrotor.constants", "qualname": "logdirfile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/media/pablo/D4DCDBA9DCDB8460/Users/pablo/Documents/PhD/_git/QRotor/out/out&#x27;"}, {"fullname": "qrotor.constants.m_H", "modulename": "qrotor.constants", "qualname": "m_H", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.673557692882144e-27"}, {"fullname": "qrotor.constants.m_D", "modulename": "qrotor.constants", "qualname": "m_D", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.3444950551171926e-27"}, {"fullname": "qrotor.constants.distance_CH", "modulename": "qrotor.constants", "qualname": "distance_CH", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.09285"}, {"fullname": "qrotor.constants.distance_NH", "modulename": "qrotor.constants", "qualname": "distance_NH", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.040263"}, {"fullname": "qrotor.constants.angle_CH_out", "modulename": "qrotor.constants", "qualname": "angle_CH_out", "kind": "variable", "doc": "<p></p>\n", "default_value": "108.7223"}, {"fullname": "qrotor.constants.angle_NH_out", "modulename": "qrotor.constants", "qualname": "angle_NH_out", "kind": "variable", "doc": "<p></p>\n", "default_value": "111.29016"}, {"fullname": "qrotor.constants.angle_CH", "modulename": "qrotor.constants", "qualname": "angle_CH", "kind": "variable", "doc": "<p></p>\n", "default_value": "71.2777"}, {"fullname": "qrotor.constants.angle_NH", "modulename": "qrotor.constants", "qualname": "angle_NH", "kind": "variable", "doc": "<p></p>\n", "default_value": "68.70984"}, {"fullname": "qrotor.constants.r", "modulename": "qrotor.constants", "qualname": "r", "kind": "variable", "doc": "<p></p>\n", "default_value": "np.float64(1.0350223020441665e-10)"}, {"fullname": "qrotor.constants.I_H", "modulename": "qrotor.constants", "qualname": "I_H", "kind": "variable", "doc": "<p></p>\n", "default_value": "np.float64(5.378502301704796e-47)"}, {"fullname": "qrotor.constants.I_D", "modulename": "qrotor.constants", "qualname": "I_D", "kind": "variable", "doc": "<p></p>\n", "default_value": "np.float64(1.0748583349408865e-46)"}, {"fullname": "qrotor.constants.B_H", "modulename": "qrotor.constants", "qualname": "B_H", "kind": "variable", "doc": "<p></p>\n", "default_value": "np.float64(0.0006452835203009358)"}, {"fullname": "qrotor.constants.B_D", "modulename": "qrotor.constants", "qualname": "B_D", "kind": "variable", "doc": "<p></p>\n", "default_value": "np.float64(0.0003228945421334646)"}, {"fullname": "qrotor.constants.constants_zero", "modulename": "qrotor.constants", "qualname": "constants_zero", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[0, 0, 0, 0, 0]]"}, {"fullname": "qrotor.constants.constants_titov2023", "modulename": "qrotor.constants", "qualname": "constants_titov2023", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[2.786, 0.013, -1.5284, -0.0037, -1.2791], [2.6507, 0.0158, -1.4111, -0.0007, -1.2547], [2.1852, 0.0164, -1.0017, 0.0003, -1.2061], [5.9109, 0.0258, -7.0152, -0.0168, 1.0213], [1.4526, 0.0134, -0.3196, 0.0005, -1.1461]]"}, {"fullname": "qrotor.file", "modulename": "qrotor.file", "kind": "module", "doc": "<p>This module provides straightforward functions to save data, as well as to load data and/or potential <code>*.dat</code> files.</p>\n"}, {"fullname": "qrotor.file.save", "modulename": "qrotor.file", "qualname": "save", "kind": "function", "doc": "<p>Save the data in the current working directory as a binary *.qrotor file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">discard_shit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.file.load", "modulename": "qrotor.file", "qualname": "load", "kind": "function", "doc": "<p>Load the data from a binary <code>*.qrotor</code> file in the current working directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;out.qrotor&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.file.load_potential", "modulename": "qrotor.file", "qualname": "load_potential", "kind": "function", "doc": "<p>Read a potential energy curve from a file and return it as a Variables object.</p>\n\n<p>The file should contain two columns:  angle and potential,</p>\n\n<p>with degrees and eV as default units.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span>, </span><span class=\"param\"><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"s1\">&#39;deg&#39;</span>, </span><span class=\"param\"><span class=\"n\">energy</span><span class=\"o\">=</span><span class=\"s1\">&#39;ev&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.file.summary", "modulename": "qrotor.file", "qualname": "summary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span>, </span><span class=\"param\"><span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.file.info", "modulename": "qrotor.file", "qualname": "info", "kind": "function", "doc": "<p>Returns the following info about the Experiment object: <code>qr</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">experiment</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.plot", "modulename": "qrotor.plot", "kind": "module", "doc": "<p>This module provides straightforward functions to plot data.</p>\n"}, {"fullname": "qrotor.plot.energies_DEV", "modulename": "qrotor.plot", "qualname": "energies_DEV", "kind": "function", "doc": "<p>Plots the energy in separated plots. NOT YET IMPLEMENTED IN v3.0.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.plot.energy_DEV", "modulename": "qrotor.plot", "qualname": "energy_DEV", "kind": "function", "doc": "<p>Plots the energy of the system. NOT YET IMPLEMENTED IN v3.0.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.plot.convergence_DEV", "modulename": "qrotor.plot", "qualname": "convergence_DEV", "kind": "function", "doc": "<p>Plots the energy convergence of the system. NOT YET IMPLEMENTED IN v3.0.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.plot.reduced_energies", "modulename": "qrotor.plot", "qualname": "reduced_energies", "kind": "function", "doc": "<p>Plots the reduced energy of the system, E/B, vs the reduced potential energy, V/B</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials", "modulename": "qrotor.potentials", "kind": "module", "doc": "<p>This module contains functions to calculate the actual <code>potential_values</code> of the system.</p>\n"}, {"fullname": "qrotor.potentials.solve", "modulename": "qrotor.potentials", "qualname": "solve", "kind": "function", "doc": "<p>Solves the <code>potential_values</code> of the system, according to the potential name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials.titov2023", "modulename": "qrotor.potentials", "qualname": "titov2023", "kind": "function", "doc": "<p>Solves the potential energy function of the hindered methyl rotor, from titov2023.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials.zero", "modulename": "qrotor.potentials", "qualname": "zero", "kind": "function", "doc": "<p>Returns a zero potential.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials.sine", "modulename": "qrotor.potentials", "qualname": "sine", "kind": "function", "doc": "<p>Returns a sine potential.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials.test", "modulename": "qrotor.potentials", "qualname": "test", "kind": "function", "doc": "<p>Returns a test potential. This is a placeholder for testing purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.potentials.custom", "modulename": "qrotor.potentials", "qualname": "custom", "kind": "function", "doc": "<p>Used to keep the previous <code>qrotor.classes.System.potential_values</code> of the system. For example, when those were obtained from an external file, with <code>qrotor.file.load_potential</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve", "modulename": "qrotor.solve", "kind": "module", "doc": "<p>This module handles the solving of the hamiltonian eigenvalues and eigenvectors for a given system.</p>\n"}, {"fullname": "qrotor.solve.get_laplacian_matrix", "modulename": "qrotor.solve", "qualname": "get_laplacian_matrix", "kind": "function", "doc": "<p>Returns the Laplacian matrix for a given grid x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve.hamiltonian_matrix", "modulename": "qrotor.solve", "qualname": "hamiltonian_matrix", "kind": "function", "doc": "<p>Returns the Hamiltonian matrix for a given <code>qrotor.classes.System</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve.potential", "modulename": "qrotor.solve", "qualname": "potential", "kind": "function", "doc": "<p>Solves the potential_values of the system, according to the potential name, by calling <code>qrotor.potentials.solve</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span>:</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve.schrodinger", "modulename": "qrotor.solve", "qualname": "schrodinger", "kind": "function", "doc": "<p>Solves the Schr\u00f6dinger equation for a given <code>qrotor.classes.System</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span>:</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve.energies", "modulename": "qrotor.solve", "qualname": "energies", "kind": "function", "doc": "<p>Solves the Schr\u00f6dinger equation for a given <code>qrotor.classes.System</code> or <code>qrotor.classes.Experiment</code> object.</p>\n\n<p>If a filename is provided, the results are saved to a file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Experiment</span>:</span></span>", "funcdef": "def"}, {"fullname": "qrotor.solve.interpolate_potential", "modulename": "qrotor.solve", "qualname": "interpolate_potential", "kind": "function", "doc": "<p>Interpolates the current potential_values to a new grid of size <code>qrotor.classes.System.gridsize</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qrotor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">System</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();